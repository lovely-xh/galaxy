#定义Log4j输出的日志级别
#TRACE < DEBUG < INFO < WARN < ERROR < FATAL
log4j.rootCategory=DEBUG,stdout

#  Log4j提供的appender有以下几种：
#  org.apache.log4j.ConsoleAppender（控制台）
#  org.apache.log4j.FileAppender（文件）
#  org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#  org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生新文件）
#  org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.stdout=org.apache.log4j.ConsoleAppender

#  Log4j提供的layout有以下几种：
#  org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#  org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#  org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#  org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.threshold=DEBUG

#   %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#   %r 输出自应用启动到输出该log信息耗费的毫秒数
#　　%c 输出所属的类目，通常就是所在类的全名
#　　%t 输出产生该日志事件的线程名
#　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
#　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921
#　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
#   %f 输出文件名 如Test_Log4J.java
#   [%c{1}就是将class名从右开始输出几个部分，输出的是，Test_Log4J.如果将1改为2，则输出为test.Test_Log4J.
log4j.appender.stdout.layout.ConversionPattern=[%d{yyy-MM-dd HH:mm:ss,SSS}]-[%p]-[MSG!:%m]-[%c\:%L]%n





BasicConfigurator.configure ()： 自动快速地使用缺省Log4j环境。  
PropertyConfigurator.configure ( String configFilename) ：读取使用Java的特性文件编写的配置文件。  
DOMConfigurator.configure ( String filename ) ：读取XML形式的配置文件。




/** 
     * @see Servlet#init(ServletConfig) 
     */  
    public void init(ServletConfig config) throws ServletException {  
        System.out.println("Log4JInitServlet 正在初始化 log4j日志设置信息");  
        String log4jLocation = config.getInitParameter("log4j-properties-location");  

        ServletContext sc = config.getServletContext();  

        if (log4jLocation == null) {  
            System.err.println("*** 没有 log4j-properties-location 初始化的文件, 所以使用 BasicConfigurator初始化");  
            BasicConfigurator.configure();  
        } else {  
            String webAppPath = sc.getRealPath("/");  
            String log4jProp = webAppPath + log4jLocation;  
            File yoMamaYesThisSaysYoMama = new File(log4jProp);  
            if (yoMamaYesThisSaysYoMama.exists()) {  
                System.out.println("使用: " + log4jProp+"初始化日志设置信息");  
                PropertyConfigurator.configure(log4jProp);  
            } else {  
                System.err.println("*** " + log4jProp + " 文件没有找到， 所以使用 BasicConfigurator初始化");  
                BasicConfigurator.configure();  
            }  
        }  
        super.init(config);  
    }